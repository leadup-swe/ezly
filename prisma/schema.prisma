// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum JobStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model Job {
  id             String @id @default(uuid())
  organizationId String

  title       String
  description String    @db.Text
  deadline    DateTime?
  status      JobStatus @default(PUBLISHED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model Team {
  id             String @id @default(uuid())
  organizationId String

  name String

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@index([organizationId])
}

model TeamMember {
  id     String @id @default(uuid())
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId, userId])
}

enum Status {
  ACTIVE
  ARCHIVED
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Project {
  id             String @id @default(uuid())
  organizationId String

  title       String
  description String?    @db.Text
  status      Status     @default(ACTIVE)
  visibility  Visibility @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators ProjectCollaborator[]
  columns       ProjectColumn[]
  columnsOrder  String?               @db.Text

  @@index([organizationId])
}

model ProjectCollaborator {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model ProjectColumn {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  name String

  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tasks      Task[]
  tasksOrder String?  @db.Text

  @@index([projectId])
}

model Task {
  id       String        @id @default(uuid())
  columnId String
  column   ProjectColumn @relation(fields: [columnId], references: [id])

  title       String
  description String?   @db.Text
  deadline    DateTime?

  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments      TaskComment[]
  subTasks      SubTask[]
  subTasksOrder String?        @db.Text
  assignees     TaskAssignee[]

  @@index([columnId])
}

model TaskAssignee {
  id     String @id @default(uuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId, userId])
}

model TaskComment {
  id     String @id @default(uuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])
  userId String

  comment String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}

model SubTask {
  id     String @id @default(uuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  title       String
  description String?   @db.Text
  deadline    DateTime?
  assigneeId  String?

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  comments  SubTaskComment[]

  @@index([taskId, assigneeId])
}

model SubTaskComment {
  id        String  @id @default(uuid())
  subTaskId String
  subTask   SubTask @relation(fields: [subTaskId], references: [id])
  userId    String

  comment String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subTaskId])
}
